
cbt-10c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000230  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000066e  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b6  00000000  00000000  000008be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000018a  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00000ffe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4a c0       	rjmp	.+148    	; 0x96 <__ctors_end>
   2:	60 c0       	rjmp	.+192    	; 0xc4 <__vector_1>
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	57 c0       	rjmp	.+174    	; 0xb6 <__bad_interrupt>
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	55 c0       	rjmp	.+170    	; 0xb6 <__bad_interrupt>
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	53 c0       	rjmp	.+166    	; 0xb6 <__bad_interrupt>
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	51 c0       	rjmp	.+162    	; 0xb6 <__bad_interrupt>
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	4f c0       	rjmp	.+158    	; 0xb6 <__bad_interrupt>
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	4d c0       	rjmp	.+154    	; 0xb6 <__bad_interrupt>
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	4b c0       	rjmp	.+150    	; 0xb6 <__bad_interrupt>
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	49 c0       	rjmp	.+146    	; 0xb6 <__bad_interrupt>
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	47 c0       	rjmp	.+142    	; 0xb6 <__bad_interrupt>
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	45 c0       	rjmp	.+138    	; 0xb6 <__bad_interrupt>
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	43 c0       	rjmp	.+134    	; 0xb6 <__bad_interrupt>
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	41 c0       	rjmp	.+130    	; 0xb6 <__bad_interrupt>

00000034 <MINI_Ddot>:
  34:	01 01 24 00                                         ..$.

00000038 <MINI_dot>:
  38:	01 01 80 00                                         ....

0000003c <ne_CIFRA>:
  3c:	08 02 00 10                                         ....

00000040 <MINI_CIFRA_9>:
  40:	05 01 00 01 26 49 49 3e                             ....&II>

00000048 <MINI_CIFRA_8>:
  48:	05 01 00 01 36 49 49 36                             ....6II6

00000050 <MINI_CIFRA_7>:
  50:	05 01 00 01 01 61 1d 03                             .....a..

00000058 <MINI_CIFRA_6>:
  58:	05 01 00 01 3e 49 49 32                             ....>II2

00000060 <MINI_CIFRA_5>:
  60:	05 01 00 01 27 45 45 39                             ....'EE9

00000068 <MINI_CIFRA_4>:
  68:	05 01 00 01 18 14 12 7f                             ........

00000070 <MINI_CIFRA_3>:
  70:	05 01 00 01 22 41 49 36                             ...."AI6

00000078 <MINI_CIFRA_2>:
  78:	05 01 00 01 62 51 49 46                             ....bQIF

00000080 <MINI_CIFRA_1>:
  80:	05 01 00 01 04 02 7f 00 01 ff                       ..........

0000008a <MINI_CIFRA_0>:
  8a:	05 01 00 01 3e 41 41 3e                             ....>AA>

00000092 <MINI_CIFRA_SP>:
  92:	01 01 00 01                                         ....

00000096 <__ctors_end>:
  96:	11 24       	eor	r1, r1
  98:	1f be       	out	0x3f, r1	; 63
  9a:	cf ef       	ldi	r28, 0xFF	; 255
  9c:	d4 e0       	ldi	r29, 0x04	; 4
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_clear_bss>:
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	a0 e0       	ldi	r26, 0x00	; 0
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
  aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
  ac:	a1 30       	cpi	r26, 0x01	; 1
  ae:	b2 07       	cpc	r27, r18
  b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
  b2:	2a d0       	rcall	.+84     	; 0x108 <main>
  b4:	47 c0       	rjmp	.+142    	; 0x144 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <asmfunc_calledfrom_c>:
.extern my_C_function
      
.section .text                  ; Defines a code section
      
asmfunc_calledfrom_c:           ; Start of asmfunc_calledfrom_c subroutine
	lds r16, my_value
  b8:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
	ldi r24, 1
  bc:	81 e0       	ldi	r24, 0x01	; 1
	rcall my_C_function
  be:	10 d0       	rcall	.+32     	; 0xe0 <my_C_function>
     out  PORTB, r24             ; Send value passed to asmfunc_calledfrom_c to PORTB
  c0:	85 b9       	out	0x05, r24	; 5
     ret
  c2:	08 95       	ret

000000c4 <__vector_1>:
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	8f 93       	push	r24
  d0:	8a e2       	ldi	r24, 0x2A	; 42
  d2:	85 b9       	out	0x05, r24	; 5
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <my_C_function>:
  e0:	00 00       	nop
  e2:	8c 5e       	subi	r24, 0xEC	; 236
  e4:	08 95       	ret

000000e6 <init>:
  e6:	28 9a       	sbi	0x05, 0	; 5
  e8:	28 98       	cbi	0x05, 0	; 5
  ea:	82 e8       	ldi	r24, 0x82	; 130
  ec:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7fe064>
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	83 bf       	out	0x33, r24	; 51
  f4:	87 ec       	ldi	r24, 0xC7	; 199
  f6:	8a b9       	out	0x0a, r24	; 10
  f8:	8c e2       	ldi	r24, 0x2C	; 44
  fa:	84 b9       	out	0x04, r24	; 4
  fc:	24 98       	cbi	0x04, 4	; 4
  fe:	24 9a       	sbi	0x04, 4	; 4
 100:	38 9a       	sbi	0x07, 0	; 7
 102:	88 b1       	in	r24, 0x08	; 8
 104:	88 b9       	out	0x08, r24	; 8
 106:	08 95       	ret

00000108 <main>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	e9 df       	rcall	.-46     	; 0xe6 <init>
 114:	e2 e9       	ldi	r30, 0x92	; 146
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	e4 91       	lpm	r30, Z
 11a:	e9 83       	std	Y+1, r30	; 0x01
 11c:	e2 e9       	ldi	r30, 0x92	; 146
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	84 91       	lpm	r24, Z
 122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	85 b9       	out	0x05, r24	; 5
 128:	31 96       	adiw	r30, 0x01	; 1
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	e6 39       	cpi	r30, 0x96	; 150
 12e:	f8 07       	cpc	r31, r24
 130:	b9 f7       	brne	.-18     	; 0x120 <main+0x18>
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	85 b9       	out	0x05, r24	; 5
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	84 b9       	out	0x04, r24	; 4
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	bd df       	rcall	.-134    	; 0xb8 <asmfunc_calledfrom_c>
 13e:	f8 94       	cli
 140:	78 94       	sei
 142:	ff cf       	rjmp	.-2      	; 0x142 <main+0x3a>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
